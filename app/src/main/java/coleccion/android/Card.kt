package coleccion.android

import android.graphics.drawable.Drawable
import coleccion.android.R.drawable.*

class Card (var col: String, var num: Int, var sha: String, var fil: String, var img: Int) {
    var color: String = ""
    var number: Int = 0
    var shape: String = ""
    var fill: String = ""
    var image: Int = 0
    init {
       col = color
       num = number
       sha = shape
       fil = fill
       img = image
    }
}

class Deck {


    val cards: MutableList<Card> = mutableListOf()

    val	bP1	=		Card("Blue",	1,	"Parallelogram",	"Solid",	colecci_n_blue_parallelogram_1	)
    val	bP2	=		Card("Blue",	2,	"Parallelogram",	"Solid",	colecci_n_blue_parallelogram_2	)
    val	bP3	=		Card("Blue",	3,	"Parallelogram",	"Solid",	colecci_n_blue_parallelogram_3	)
    val	bPE1	=		Card("Blue",	1,	"Parallelogram",	"Empty",	colecci_n_blue_parallelogram_e_1	)
    val	bPE2	=		Card("Blue",	2,	"Parallelogram",	"Empty",	colecci_n_blue_parallelogram_e_2	)
    val	bPE3	=		Card("Blue",	3,	"Parallelogram",	"Empty",	colecci_n_blue_parallelogram_e_3	)
    val	bPS1	=		Card("Blue",	1,	"Parallelogram",	"Grid",	colecci_n_blue_parallelogram_s_1	)
    val	bPS2	=		Card("Blue",	2,	"Parallelogram",	"Grid",	colecci_n_blue_parallelogram_s_2	)
    val	bPS3	=		Card("Blue",	3,	"Parallelogram",	"Grid",	colecci_n_blue_parallelogram_s_3	)
    val	gP1	=		Card("Green",	1,	"Parallelogram",	"Solid",	colecci_n_green_parallelogram_1	)
    val	gP2	=		Card("Green",	2,	"Parallelogram",	"Solid",	colecci_n_green_parallelogram_2	)
    val	gP3	=		Card("Green",	3,	"Parallelogram",	"Solid",	colecci_n_green_parallelogram_3	)
    val	gPE1	=		Card("Green",	1,	"Parallelogram",	"Empty",	colecci_n_green_parallelogram_e_1	)
    val	gPE2	=		Card("Green",	2,	"Parallelogram",	"Empty",	colecci_n_green_parallelogram_e_2	)
    val	gPE3	=		Card("Green",	3,	"Parallelogram",	"Empty",	colecci_n_green_parallelogram_e_3	)
    val	gPS1	=		Card("Green",	1,	"Parallelogram",	"Grid",	colecci_n_green_parallelogram_s_1	)
    val	gPS2	=		Card("Green",	2,	"Parallelogram",	"Grid",	colecci_n_green_parallelogram_s_2	)
    val	gPS3	=		Card("Green",	3,	"Parallelogram",	"Grid",	colecci_n_green_parallelogram_s_3	)
    val	oP1	=		Card("Orange",	1,	"Parallelogram",	"Solid",	colecci_n_orange_parallelogram_1	)
    val	oP2	=		Card("Orange",	2,	"Parallelogram",	"Solid",	colecci_n_orange_parallelogram_2	)
    val	oP3	=		Card("Orange",	3,	"Parallelogram",	"Solid",	colecci_n_orange_parallelogram_3	)
    val	oPE1	=		Card("Orange",	1,	"Parallelogram",	"Empty",	colecci_n_orange_parallelogram_e_1	)
    val	oPE2	=		Card("Orange",	2,	"Parallelogram",	"Empty",	colecci_n_orange_parallelogram_e_2	)
    val	oPE3	=		Card("Orange",	3,	"Parallelogram",	"Empty",	colecci_n_orange_parallelogram_e_3	)
    val	oPS1	=		Card("Orange",	1,	"Parallelogram",	"Grid",	colecci_n_orange_parallelogram_s_1	)
    val	oPS2	=		Card("Orange",	2,	"Parallelogram",	"Grid",	colecci_n_orange_parallelogram_s_2	)
    val	oPS3	=		Card("Orange",	3,	"Parallelogram",	"Grid",	colecci_n_orange_parallelogram_s_3	)
    val	rP1	=		Card("Red",	1,	"Parallelogram",	"Solid",	colecci_n_red_parallelogram_1	)
    val	rP2	=		Card("Red",	2,	"Parallelogram",	"Solid",	colecci_n_red_parallelogram_2	)
    val	rP3	=		Card("Red",	3,	"Parallelogram",	"Solid",	colecci_n_red_parallelogram_3	)
    val	rPE1	=		Card("Red",	1,	"Parallelogram",	"Empty",	colecci_n_red_parallelogram_e_1	)
    val	rPE2	=		Card("Red",	2,	"Parallelogram",	"Empty",	colecci_n_red_parallelogram_e_2	)
    val	rPE3	=		Card("Red",	3,	"Parallelogram",	"Empty",	colecci_n_red_parallelogram_e_3	)
    val	rPS1	=		Card("Red",	1,	"Parallelogram",	"Grid",	colecci_n_red_parallelogram_s_1	)
    val	rPS2	=		Card("Red",	2,	"Parallelogram",	"Grid",	colecci_n_red_parallelogram_s_2	)
    val	rPS3	=		Card("Red",	3,	"Parallelogram",	"Grid",	colecci_n_red_parallelogram_s_3	)
    val	bR1	=		Card("Blue",	1,	"Rectangle",	"Solid",	colecci_n_blue_rectangle_1	)
    val	bR2	=		Card("Blue",	2,	"Rectangle",	"Solid",	colecci_n_blue_rectangle_2	)
    val	bR3	=		Card("Blue",	3,	"Rectangle",	"Solid",	colecci_n_blue_rectangle_3	)
    val	bRE1	=		Card("Blue",	1,	"Rectangle",	"Empty",	colecci_n_blue_rectangle_e_1	)
    val	bRE2	=		Card("Blue",	2,	"Rectangle",	"Empty",	colecci_n_blue_rectangle_e_2	)
    val	bRE3	=		Card("Blue",	3,	"Rectangle",	"Empty",	colecci_n_blue_rectangle_e_3	)
    val	bRS1	=		Card("Blue",	1,	"Rectangle",	"Grid",	colecci_n_blue_rectangle_s_1	)
    val	bRS2	=		Card("Blue",	2,	"Rectangle",	"Grid",	colecci_n_blue_rectangle_s_2	)
    val	bRS3	=		Card("Blue",	3,	"Rectangle",	"Grid",	colecci_n_blue_rectangle_s_3	)
    val	gR1	=		Card("Green",	1,	"Rectangle",	"Solid",	colecci_n_green_rectangle_1	)
    val	gR2	=		Card("Green",	2,	"Rectangle",	"Solid",	colecci_n_green_rectangle_2	)
    val	gR3	=		Card("Green",	3,	"Rectangle",	"Solid",	colecci_n_green_rectangle_3	)
    val	gRE1	=		Card("Green",	1,	"Rectangle",	"Empty",	colecci_n_green_rectangle_e_1	)
    val	gRE2	=		Card("Green",	2,	"Rectangle",	"Empty",	colecci_n_green_rectangle_e_2	)
    val	gRE3	=		Card("Green",	3,	"Rectangle",	"Empty",	colecci_n_green_rectangle_e_3	)
    val	gRS1	=		Card("Green",	1,	"Rectangle",	"Grid",	colecci_n_green_rectangle_s_1	)
    val	gRS2	=		Card("Green",	2,	"Rectangle",	"Grid",	colecci_n_green_rectangle_s_2	)
    val	gRS3	=		Card("Green",	3,	"Rectangle",	"Grid",	colecci_n_green_rectangle_s_3	)
    val	oR1	=		Card("Orange",	1,	"Rectangle",	"Solid",	colecci_n_orange_rectangle_1	)
    val	oR2	=		Card("Orange",	2,	"Rectangle",	"Solid",	colecci_n_orange_rectangle_2	)
    val	oR3	=		Card("Orange",	3,	"Rectangle",	"Solid",	colecci_n_orange_rectangle_3	)
    val	oRE1	=		Card("Orange",	1,	"Rectangle",	"Empty",	colecci_n_orange_rectangle_e_1	)
    val	oRE2	=		Card("Orange",	2,	"Rectangle",	"Empty",	colecci_n_orange_rectangle_e_2	)
    val	oRE3	=		Card("Orange",	3,	"Rectangle",	"Empty",	colecci_n_orange_rectangle_e_3	)
    val	oRS1	=		Card("Orange",	1,	"Rectangle",	"Grid",	colecci_n_orange_rectangle_s_1	)
    val	oRS2	=		Card("Orange",	2,	"Rectangle",	"Grid",	colecci_n_orange_rectangle_s_2	)
    val	oRS3	=		Card("Orange",	3,	"Rectangle",	"Grid",	colecci_n_orange_rectangle_s_3	)
    val	rR1	=		Card("Red",	1,	"Rectangle",	"Solid",	colecci_n_red_rectangle_1	)
    val	rR2	=		Card("Red",	2,	"Rectangle",	"Solid",	colecci_n_red_rectangle_2	)
    val	rR3	=		Card("Red",	3,	"Rectangle",	"Solid",	colecci_n_red_rectangle_3	)
    val	rRE1	=		Card("Red",	1,	"Rectangle",	"Empty",	colecci_n_red_rectangle_e_1	)
    val	rRE2	=		Card("Red",	2,	"Rectangle",	"Empty",	colecci_n_red_rectangle_e_2	)
    val	rRE3	=		Card("Red",	3,	"Rectangle",	"Empty",	colecci_n_red_rectangle_e_3	)
    val	rRS1	=		Card("Red",	1,	"Rectangle",	"Grid",	colecci_n_red_rectangle_s_1	)
    val	rRS2	=		Card("Red",	2,	"Rectangle",	"Grid",	colecci_n_red_rectangle_s_2	)
    val	rRS3	=		Card("Red",	3,	"Rectangle",	"Grid",	colecci_n_red_rectangle_s_3	)
    val	bS1	=		Card("Blue",	1,	"Semicircle",	"Solid",	colecci_n_blue_semicircle_1	)
    val	bS2	=		Card("Blue",	2,	"Semicircle",	"Solid",	colecci_n_blue_semicircle_2	)
    val	bS3	=		Card("Blue",	3,	"Semicircle",	"Solid",	colecci_n_blue_semicircle_3	)
    val	bSE1	=		Card("Blue",	1,	"Semicircle",	"Empty",	colecci_n_blue_semicircle_e_1	)
    val	bSE2	=		Card("Blue",	2,	"Semicircle",	"Empty",	colecci_n_blue_semicircle_e_2	)
    val	bSE3	=		Card("Blue",	3,	"Semicircle",	"Empty",	colecci_n_blue_semicircle_e_3	)
    val	bSS1	=		Card("Blue",	1,	"Semicircle",	"Grid",	colecci_n_blue_semicircle_s_1	)
    val	bSS2	=		Card("Blue",	2,	"Semicircle",	"Grid",	colecci_n_blue_semicircle_s_2	)
    val	bSS3	=		Card("Blue",	3,	"Semicircle",	"Grid",	colecci_n_blue_semicircle_s_3	)
    val	gS1	=		Card("Green",	1,	"Semicircle",	"Solid",	colecci_n_green_semicircle_1	)
    val	gS2	=		Card("Green",	2,	"Semicircle",	"Solid",	colecci_n_green_semicircle_2	)
    val	gS3	=		Card("Green",	3,	"Semicircle",	"Solid",	colecci_n_green_semicircle_3	)
    val	gSE1	=		Card("Green",	1,	"Semicircle",	"Empty",	colecci_n_green_semicircle_e_1	)
    val	gSE2	=		Card("Green",	2,	"Semicircle",	"Empty",	colecci_n_green_semicircle_e_2	)
    val	gSE3	=		Card("Green",	3,	"Semicircle",	"Empty",	colecci_n_green_semicircle_e_3	)
    val	gSS1	=		Card("Green",	1,	"Semicircle",	"Grid",	colecci_n_green_semicircle_s_1	)
    val	gSS2	=		Card("Green",	2,	"Semicircle",	"Grid",	colecci_n_green_semicircle_s_2	)
    val	gSS3	=		Card("Green",	3,	"Semicircle",	"Grid",	colecci_n_green_semicircle_s_3	)
    val	oS1	=		Card("Orange",	1,	"Semicircle",	"Solid",	colecci_n_orange_semicircle_1	)
    val	oS2	=		Card("Orange",	2,	"Semicircle",	"Solid",	colecci_n_orange_semicircle_2	)
    val	oS3	=		Card("Orange",	3,	"Semicircle",	"Solid",	colecci_n_orange_semicircle_3	)
    val	oSE1	=		Card("Orange",	1,	"Semicircle",	"Empty",	colecci_n_orange_semicircle_e_1	)
    val	oSE2	=		Card("Orange",	2,	"Semicircle",	"Empty",	colecci_n_orange_semicircle_e_2	)
    val	oSE3	=		Card("Orange",	3,	"Semicircle",	"Empty",	colecci_n_orange_semicircle_e_3	)
    val	oSS1	=		Card("Orange",	1,	"Semicircle",	"Grid",	colecci_n_orange_semicircle_s_1	)
    val	oSS2	=		Card("Orange",	2,	"Semicircle",	"Grid",	colecci_n_orange_semicircle_s_2	)
    val	oSS3	=		Card("Orange",	3,	"Semicircle",	"Grid",	colecci_n_orange_semicircle_s_3	)
    val	rS1	=		Card("Red",	1,	"Semicircle",	"Solid",	colecci_n_red_semicircle_1	)
    val	rS2	=		Card("Red",	2,	"Semicircle",	"Solid",	colecci_n_red_semicircle_2	)
    val	rS3	=		Card("Red",	3,	"Semicircle",	"Solid",	colecci_n_red_semicircle_3	)
    val	rSE1	=		Card("Red",	1,	"Semicircle",	"Empty",	colecci_n_red_semicircle_e_1	)
    val	rSE2	=		Card("Red",	2,	"Semicircle",	"Empty",	colecci_n_red_semicircle_e_2	)
    val	rSE3	=		Card("Red",	3,	"Semicircle",	"Empty",	colecci_n_red_semicircle_e_3	)
    val	rSS1	=		Card("Red",	1,	"Semicircle",	"Grid",	colecci_n_red_semicircle_s_1	)
    val	rSS2	=		Card("Red",	2,	"Semicircle",	"Grid",	colecci_n_red_semicircle_s_2	)
    val	rSS3	=		Card("Red",	3,	"Semicircle",	"Grid",	colecci_n_red_semicircle_s_3	)
    val	bT1	=		Card("Blue",	1,	"Triangle",	"Solid",	colecci_n_blue_triangle_1	)
    val	bT2	=		Card("Blue",	2,	"Triangle",	"Solid",	colecci_n_blue_triangle_2	)
    val	bT3	=		Card("Blue",	3,	"Triangle",	"Solid",	colecci_n_blue_triangle_3	)
    val	bTE1	=		Card("Blue",	1,	"Triangle",	"Empty",	colecci_n_blue_triangle_e_1	)
    val	bTE2	=		Card("Blue",	2,	"Triangle",	"Empty",	colecci_n_blue_triangle_e_2	)
    val	bTE3	=		Card("Blue",	3,	"Triangle",	"Empty",	colecci_n_blue_triangle_e_3	)
    val	bTS1	=		Card("Blue",	1,	"Triangle",	"Grid",	colecci_n_blue_triangle_s_1	)
    val	bTS2	=		Card("Blue",	2,	"Triangle",	"Grid",	colecci_n_blue_triangle_s_2	)
    val	bTS3	=		Card("Blue",	3,	"Triangle",	"Grid",	colecci_n_blue_triangle_s_3	)
    val	gT1	=		Card("Green",	1,	"Triangle",	"Solid",	colecci_n_green_triangle_1	)
    val	gT2	=		Card("Green",	2,	"Triangle",	"Solid",	colecci_n_green_triangle_2	)
    val	gT3	=		Card("Green",	3,	"Triangle",	"Solid",	colecci_n_green_triangle_3	)
    val	gTE1	=		Card("Green",	1,	"Triangle",	"Empty",	colecci_n_green_triangle_e_1	)
    val	gTE2	=		Card("Green",	2,	"Triangle",	"Empty",	colecci_n_green_triangle_e_2	)
    val	gTE3	=		Card("Green",	3,	"Triangle",	"Empty",	colecci_n_green_triangle_e_3	)
    val	gTS1	=		Card("Green",	1,	"Triangle",	"Grid",	colecci_n_green_triangle_s_1	)
    val	gTS2	=		Card("Green",	2,	"Triangle",	"Grid",	colecci_n_green_triangle_s_2	)
    val	gTS3	=		Card("Green",	3,	"Triangle",	"Grid",	colecci_n_green_triangle_s_3	)
    val	oT1	=		Card("Orange",	1,	"Triangle",	"Solid",	colecci_n_orange_triangle_1	)
    val	oT2	=		Card("Orange",	2,	"Triangle",	"Solid",	colecci_n_orange_triangle_2	)
    val	oT3	=		Card("Orange",	3,	"Triangle",	"Solid",	colecci_n_orange_triangle_3	)
    val	oTE1	=		Card("Orange",	1,	"Triangle",	"Empty",	colecci_n_orange_triangle_e_1	)
    val	oTE2	=		Card("Orange",	2,	"Triangle",	"Empty",	colecci_n_orange_triangle_e_2	)
    val	oTE3	=		Card("Orange",	3,	"Triangle",	"Empty",	colecci_n_orange_triangle_e_3	)
    val	oTS1	=		Card("Orange",	1,	"Triangle",	"Grid",	colecci_n_orange_triangle_s_1	)
    val	oTS2	=		Card("Orange",	2,	"Triangle",	"Grid",	colecci_n_orange_triangle_s_2	)
    val	oTS3	=		Card("Orange",	3,	"Triangle",	"Grid",	colecci_n_orange_triangle_s_3	)
    val	rT1	=		Card("Red",	1,	"Triangle",	"Solid",	colecci_n_red_triangle_1	)
    val	rT2	=		Card("Red",	2,	"Triangle",	"Solid",	colecci_n_red_triangle_2	)
    val	rT3	=		Card("Red",	3,	"Triangle",	"Solid",	colecci_n_red_triangle_3	)
    val	rTE1	=		Card("Red",	1,	"Triangle",	"Empty",	colecci_n_red_triangle_e_1	)
    val	rTE2	=		Card("Red",	2,	"Triangle",	"Empty",	colecci_n_red_triangle_e_2	)
    val	rTE3	=		Card("Red",	3,	"Triangle",	"Empty",	colecci_n_red_triangle_e_3	)
    val	rTS1	=		Card("Red",	1,	"Triangle",	"Grid",	colecci_n_red_triangle_s_1	)
    val	rTS2	=		Card("Red",	2,	"Triangle",	"Grid",	colecci_n_red_triangle_s_2	)
    val	rTS3	=		Card("Red",	3,	"Triangle",	"Grid",	colecci_n_red_triangle_s_3	)

    init {
        cards.add(	bP1	)
        cards.add(	bP2	)
        cards.add(	bP3	)
        cards.add(	bPE1	)
        cards.add(	bPE2	)
        cards.add(	bPE3	)
        cards.add(	bPS1	)
        cards.add(	bPS2	)
        cards.add(	bPS3	)
        cards.add(	gP1	)
        cards.add(	gP2	)
        cards.add(	gP3	)
        cards.add(	gPE1	)
        cards.add(	gPE2	)
        cards.add(	gPE3	)
        cards.add(	gPS1	)
        cards.add(	gPS2	)
        cards.add(	gPS3	)
        cards.add(	oP1	)
        cards.add(	oP2	)
        cards.add(	oP3	)
        cards.add(	oPE1	)
        cards.add(	oPE2	)
        cards.add(	oPE3	)
        cards.add(	oPS1	)
        cards.add(	oPS2	)
        cards.add(	oPS3	)
        cards.add(	rP1	)
        cards.add(	rP2	)
        cards.add(	rP3	)
        cards.add(	rPE1	)
        cards.add(	rPE2	)
        cards.add(	rPE3	)
        cards.add(	rPS1	)
        cards.add(	rPS2	)
        cards.add(	rPS3	)
        cards.add(	bR1	)
        cards.add(	bR2	)
        cards.add(	bR3	)
        cards.add(	bRE1	)
        cards.add(	bRE2	)
        cards.add(	bRE3	)
        cards.add(	bRS1	)
        cards.add(	bRS2	)
        cards.add(	bRS3	)
        cards.add(	gR1	)
        cards.add(	gR2	)
        cards.add(	gR3	)
        cards.add(	gRE1	)
        cards.add(	gRE2	)
        cards.add(	gRE3	)
        cards.add(	gRS1	)
        cards.add(	gRS2	)
        cards.add(	gRS3	)
        cards.add(	oR1	)
        cards.add(	oR2	)
        cards.add(	oR3	)
        cards.add(	oRE1	)
        cards.add(	oRE2	)
        cards.add(	oRE3	)
        cards.add(	oRS1	)
        cards.add(	oRS2	)
        cards.add(	oRS3	)
        cards.add(	rR1	)
        cards.add(	rR2	)
        cards.add(	rR3	)
        cards.add(	rRE1	)
        cards.add(	rRE2	)
        cards.add(	rRE3	)
        cards.add(	rRS1	)
        cards.add(	rRS2	)
        cards.add(	rRS3	)
        cards.add(	bS1	)
        cards.add(	bS2	)
        cards.add(	bS3	)
        cards.add(	bSE1	)
        cards.add(	bSE2	)
        cards.add(	bSE3	)
        cards.add(	bSS1	)
        cards.add(	bSS2	)
        cards.add(	bSS3	)
        cards.add(	gS1	)
        cards.add(	gS2	)
        cards.add(	gS3	)
        cards.add(	gSE1	)
        cards.add(	gSE2	)
        cards.add(	gSE3	)
        cards.add(	gSS1	)
        cards.add(	gSS2	)
        cards.add(	gSS3	)
        cards.add(	oS1	)
        cards.add(	oS2	)
        cards.add(	oS3	)
        cards.add(	oSE1	)
        cards.add(	oSE2	)
        cards.add(	oSE3	)
        cards.add(	oSS1	)
        cards.add(	oSS2	)
        cards.add(	oSS3	)
        cards.add(	rS1	)
        cards.add(	rS2	)
        cards.add(	rS3	)
        cards.add(	rSE1	)
        cards.add(	rSE2	)
        cards.add(	rSE3	)
        cards.add(	rSS1	)
        cards.add(	rSS2	)
        cards.add(	rSS3	)
        cards.add(	bT1	)
        cards.add(	bT2	)
        cards.add(	bT3	)
        cards.add(	bTE1	)
        cards.add(	bTE2	)
        cards.add(	bTE3	)
        cards.add(	bTS1	)
        cards.add(	bTS2	)
        cards.add(	bTS3	)
        cards.add(	gT1	)
        cards.add(	gT2	)
        cards.add(	gT3	)
        cards.add(	gTE1	)
        cards.add(	gTE2	)
        cards.add(	gTE3	)
        cards.add(	gTS1	)
        cards.add(	gTS2	)
        cards.add(	gTS3	)
        cards.add(	oT1	)
        cards.add(	oT2	)
        cards.add(	oT3	)
        cards.add(	oTE1	)
        cards.add(	oTE2	)
        cards.add(	oTE3	)
        cards.add(	oTS1	)
        cards.add(	oTS2	)
        cards.add(	oTS3	)
        cards.add(	rT1	)
        cards.add(	rT2	)
        cards.add(	rT3	)
        cards.add(	rTE1	)
        cards.add(	rTE2	)
        cards.add(	rTE3	)
        cards.add(	rTS1	)
        cards.add(	rTS2	)
        cards.add(	rTS3	)
    }
    fun shuffle() {
        cards.shuffle()
    }

    fun drawCard(): Card? {
        return if (cards.isNotEmpty()) cards.removeAt(0) else null
    }

}